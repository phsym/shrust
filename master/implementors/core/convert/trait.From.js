(function() {var implementors = {};
implementors["bstr"] = [{"text":"impl&lt;'a&gt; From&lt;&amp;'a [u8]&gt; for BString","synthetic":false,"types":[]},{"text":"impl From&lt;Vec&lt;u8&gt;&gt; for BString","synthetic":false,"types":[]},{"text":"impl From&lt;BString&gt; for Vec&lt;u8&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a str&gt; for BString","synthetic":false,"types":[]},{"text":"impl From&lt;String&gt; for BString","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a BStr&gt; for BString","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;BString&gt; for Cow&lt;'a, BStr&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a [u8]&gt; for &amp;'a BStr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a str&gt; for &amp;'a BStr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a BStr&gt; for Cow&lt;'a, BStr&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;Box&lt;[u8], Global&gt;&gt; for Box&lt;BStr&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;Box&lt;BStr, Global&gt;&gt; for Box&lt;[u8]&gt;","synthetic":false,"types":[]}];
implementors["csv"] = [{"text":"impl From&lt;StringRecord&gt; for ByteRecord","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;AsRef&lt;[u8]&gt;&gt; From&lt;Vec&lt;T&gt;&gt; for ByteRecord","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;AsRef&lt;[u8]&gt;&gt; From&lt;&amp;'a [T]&gt; for ByteRecord","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;AsRef&lt;str&gt;&gt; From&lt;Vec&lt;T&gt;&gt; for StringRecord","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;AsRef&lt;str&gt;&gt; From&lt;&amp;'a [T]&gt; for StringRecord","synthetic":false,"types":[]}];
implementors["encode_unicode"] = [{"text":"impl From&lt;InvalidUtf8FirstByte&gt; for InvalidUtf8","synthetic":false,"types":[]},{"text":"impl From&lt;InvalidUtf8&gt; for InvalidUtf8Array","synthetic":false,"types":[]},{"text":"impl From&lt;InvalidCodepoint&gt; for InvalidUtf8Array","synthetic":false,"types":[]},{"text":"impl From&lt;InvalidUtf8&gt; for InvalidUtf8Slice","synthetic":false,"types":[]},{"text":"impl From&lt;InvalidCodepoint&gt; for InvalidUtf8Slice","synthetic":false,"types":[]},{"text":"impl From&lt;Utf16Char&gt; for Utf8Char","synthetic":false,"types":[]},{"text":"impl From&lt;char&gt; for Utf8Char","synthetic":false,"types":[]},{"text":"impl From&lt;Utf8Char&gt; for char","synthetic":false,"types":[]},{"text":"impl From&lt;Utf8Char&gt; for Utf8Iterator","synthetic":false,"types":[]},{"text":"impl From&lt;char&gt; for Utf8Iterator","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Iterator&lt;Item = Utf8Char&gt;&gt; From&lt;I&gt; for Utf8CharSplitter&lt;Utf8Char, I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a str&gt; for Utf8CharIndices&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a str&gt; for Utf8Chars&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;char&gt; for Utf16Char","synthetic":false,"types":[]},{"text":"impl From&lt;Utf8Char&gt; for Utf16Char","synthetic":false,"types":[]},{"text":"impl From&lt;Utf16Char&gt; for char","synthetic":false,"types":[]},{"text":"impl From&lt;char&gt; for Utf16Iterator","synthetic":false,"types":[]},{"text":"impl From&lt;Utf16Char&gt; for Utf16Iterator","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Iterator&lt;Item = Utf16Char&gt;&gt; From&lt;I&gt; for Utf16CharSplitter&lt;Utf16Char, I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a str&gt; for Utf16CharIndices&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a str&gt; for Utf16Chars&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;B:&nbsp;Borrow&lt;u8&gt;, I:&nbsp;Iterator&lt;Item = B&gt;, T:&nbsp;IntoIterator&lt;IntoIter = I, Item = B&gt;&gt; From&lt;T&gt; for Utf8CharMerger&lt;B, I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a [u8]&gt; for Utf8CharDecoder&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;B:&nbsp;Borrow&lt;u16&gt;, I:&nbsp;Iterator&lt;Item = B&gt;, T:&nbsp;IntoIterator&lt;IntoIter = I, Item = B&gt;&gt; From&lt;T&gt; for Utf16CharMerger&lt;B, I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a [u16]&gt; for Utf16CharDecoder&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["prettytable"] = [{"text":"impl&lt;'a, T:&nbsp;ToString&gt; From&lt;&amp;'a T&gt; for Cell","synthetic":false,"types":[]},{"text":"impl&lt;T, A&gt; From&lt;T&gt; for Row <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: ToString,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: IntoIterator&lt;Item = A&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl From&lt;TableFormat&gt; for FormatBuilder","synthetic":false,"types":[]},{"text":"impl&lt;T, A, B&gt; From&lt;T&gt; for Table <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: ToString,<br>&nbsp;&nbsp;&nbsp;&nbsp;A: IntoIterator&lt;Item = B&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: IntoIterator&lt;Item = A&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["shrust"] = [{"text":"impl&lt;E:&nbsp;Error + 'static&gt; From&lt;E&gt; for ExecError","synthetic":false,"types":[]}];
implementors["term"] = [{"text":"impl From&lt;FromUtf8Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()